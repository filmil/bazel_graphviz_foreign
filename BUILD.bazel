load("@rules_cc//cc:defs.bzl", "cc_test")
load("@rules_foreign_cc//foreign_cc:defs.bzl", "configure_make", "configure_make_variant")

package(default_visibility = ["//visibility:public"])

_BINARIES = [
    "acyclic",
    "bcomps",
    "ccomps",
    "cluster",
    "dijkstra",
    "dot2gxl",
    "dot_static",
    "edgepaint",
    "gc",
    "gml2gv",
    "graphml2gv",
    "gv2gml",
    "gv2gxl",
    "gvcolor",
    "gvgen",
    "gvmap",
    "gvmap.sh",
    "gvpack_static",
    "gvpr_static",
    "gxl2dot",
    "gxl2gv",
    "mm2gv",
    "nop",
    "prune",
    "sccmap",
    "sfdp",
    "tred",
    "unflatten",
]


alias(
    name = "lib",
    actual = ":build_target",
)

configure_make(
    name = "build_target",
    lib_source = "@src//:all_srcs",
    configure_in_place = True,
    configure_options = [
        "--disable-shared",
        "--enable-static",
    ],
    out_binaries = _BINARIES,
    # For some reason, shared library building does not work.
    # I added `--disable-shared` to turn that off completely.
    #out_shared_libs = [
        #"libgvpr.so.2",
        #"libgvc.so.7.0.0",
        #"libpathplan.so.4",
        #"libcgraph.so.8",
        #"libgvpr.so.2.0.0",
        #"libxdot.so.4.0.0",
        #"graphviz/libgvplugin_xlib.so.8",
        #"graphviz/libgvplugin_kitty.so.8.0.0",
        #"graphviz/libgvplugin_neato_layout.so",
        #"graphviz/libgvplugin_core.so.8",
        #"graphviz/libgvplugin_dot_layout.so.8",
        #"graphviz/libgvplugin_gdk.so.8",
        #"graphviz/libgvplugin_xlib.so",
        #"graphviz/libgvplugin_gdk.so",
        #"graphviz/libgvplugin_vt.so.8.0.0",
        #"graphviz/libgvplugin_core.so.8.0.0",
        #"graphviz/libgvplugin_pango.so.8",
        #"graphviz/libgvplugin_dot_layout.so.8.0.0",
        #"graphviz/libgvplugin_xlib.so.8.0.0",
        #"graphviz/libgvplugin_kitty.so.8",
        #"graphviz/libgvplugin_dot_layout.so",
        #"graphviz/libgvplugin_pango.so.8.0.0",
        #"graphviz/libgvplugin_kitty.so",
        #"graphviz/libgvplugin_vt.so",
        #"graphviz/libgvplugin_neato_layout.so.8.0.0",
        #"graphviz/tcl/libtcldot.so",
        #"graphviz/tcl/libtcldot_builtin.so",
        #"graphviz/tcl/libtclplan.so",
        #"graphviz/libgvplugin_gdk.so.8.0.0",
        #"graphviz/libgvplugin_neato_layout.so.8",
        #"graphviz/libgvplugin_vt.so.8",
        #"graphviz/libgvplugin_pango.so",
        #"graphviz/libgvplugin_core.so",
        #"libcgraph.so.8.0.0",
        #"libgvpr.so",
        #"libcdt.so.6.0.0",
        #"libgvc.so",
        #"libcgraph.so",
        #"libxdot.so.4",
        #"libcdt.so.6",
        #"libcdt.so",
        #"libpathplan.so.4.0.0",
        #"libxdot.so",
        #"libpathplan.so",
        #"libgvc.so.7",
    #],
    out_static_libs = [
        "graphviz/libgvplugin_neato_layout.a",
        "graphviz/libgvplugin_dot_layout.a",
        "graphviz/libgvplugin_core.a",
        #"graphviz/libgvplugin_gdk.a",
        #"graphviz/libgvplugin_pango.a",
        "graphviz/tcl/libtcldot_builtin.a",
        "graphviz/tcl/libtcldot.a",
        "graphviz/libgvplugin_vt.a",
        "libgvc.a",
        "libgvpr.a",
    ],
)


[
    # Generate a target for each binary, for example `//:eu-ar_bin`.
    filegroup(
        name = binary_name + "_bin",
        output_group = binary_name,
        srcs = [":lib"],
    )
    for binary_name in _BINARIES
]


cc_test(
    name = "test",
    srcs = [
        "test.cc",
    ],
    deps = [
        ":lib",
    ],
)

